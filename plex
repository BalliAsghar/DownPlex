#!/usr/bin/env python3
import re
import click
from plexapi.exceptions import BadRequest
from plexapi.myplex import MyPlexAccount
import keyring
from keyring.errors import PasswordDeleteError

# Save User Credentials


def save_credentials(token):
    keyring.set_password('plexURLGen', 'token', token)

# Get User Credentials


def get_credentials():
    token = keyring.get_password('plexURLGen', 'token')
    if token:
        return token
    else:
        return "no_token"

# list of servers


def list_servers(account):
    return [{'name': server.name, 'id': server.clientIdentifier}
            for server in account.resources()]

# Get Plex Account


def get_account():
    # Get credentials
    credentials = get_credentials()
    # If credentials exist
    if credentials != "no_token":
        # Get account
        try:
            account = MyPlexAccount(token=credentials)
            return account
        except Exception as e:
            raise BadRequest('Error connecting to Plex account: {}'.format(e))
    else:
        raise click.ClickException(
            'No credentials found, please authenticate first')


# PLAYLISTS
def list_playlists(account, server_name):
    try:
        plex = account.resource(server_name).connect()
        return plex.playlists()
    except Exception as e:
        raise click.ClickException(str(e))


def get_playlist_urls(account, server_name, playlist_title):
    plex = account.resource(server_name).connect()
    playlist = plex.playlist(playlist_title)

    item_urls = []
    for item in playlist.items():
        base_url = item._server._baseurl
        media_url = item.media[0].parts[0].key
        token = item._server._token
        url = (f"{base_url}{media_url}?X-Plex-Token={token}&download=1")
        item_urls.append(url)

    return item_urls


def get_download_url(web_url):
    if not web_url:
        raise BadRequest('Invalid URL')

    # Regex
    pattern_server_id = r"(?<=server\/).*?(?=\/details)"
    pattern_metadata_key = r"(?<=metadata%2F).*?(?=&context)"

    server_id = re.search(pattern_server_id, web_url)
    metadata_key = re.search(pattern_metadata_key,
                             web_url)

    if not server_id or not metadata_key:
        raise BadRequest('Invalid URL')

    server_id = server_id.group(0)
    metadata_key = metadata_key.group(0).replace("\\", "")

    # if metadata_key or server_id is empty, raise exception
    if not server_id or not metadata_key:
        raise BadRequest('Invalid URL')

    # Get account
    account = get_account()

    # Get servers
    servers = list_servers(account)

    # find the server using a generator expression and the `next` function
    server = next(
        (server for server in servers if server['id'] == server_id), None)
    if not server:
        raise BadRequest('Server not found')

    # get media and construct the download URL
    plex = account.resource(server['name']).connect()
    media = plex.fetchItem(int(metadata_key))
    base_url = media._server._baseurl
    media_url = media.media[0].parts[0].key
    token = media._server._token
    url = f"{base_url}{media_url}?X-Plex-Token={token}&download=1"

    return url


@click.group()
def plex():
    pass


@click.command(name='auth')
@click.option('--username', prompt=True, help='Plex username')
@click.password_option(help='Plex password')
def authenticate_cli(username, password):
    try:
        # Ask user if 2FA is enabled, if so ask for pin
        two_factor = click.confirm('Is 2FA enabled?')
        if two_factor:
            pin = click.prompt('Enter 2FA code')
        else:
            pin = None
        # Authenticate user
        account = MyPlexAccount(username, password, code=pin)
        # Get token
        token = account.authenticationToken
        # Save token
        save_credentials(token)
        click.echo('Authentication successful')
    except Exception as e:
        click.echo('Error: {}'.format(e))


@click.command(name='download')
@click.argument('query')
def download_media_cli(query):
    url = get_download_url(query)
    click.echo(url)


@click.command(name='signout')
def signout_cli():
    try:
        keyring.delete_password('plexURLGen', 'token')
        click.echo('Signed out successfully')
    except PasswordDeleteError:
        click.echo('No credentials found')


@click.command(name='playlist')
def playlist_cli():
    account = get_account()

    # List servers
    servers = list_servers(account)

    click.echo("Choose a server:")
    for index, server in enumerate(servers, start=1):
        click.echo(f"{index}. {server['name']}")

    server_index = click.prompt(
        "Enter server number", type=int) - 1

    try:
        server_name = servers[server_index]['name']
    except IndexError:
        raise click.ClickException('Invalid server number')

    click.echo("Choose a playlist:")
    playlists = list_playlists(account, server_name)

    # If no playlists, exit
    if not playlists:
        click.echo("No playlists found")
        return

    for index, playlist in enumerate(playlists, start=1):
        click.echo(f"{index}. {playlist.title}")

    playlist_index = click.prompt(
        "Enter playlist number", type=int) - 1

    try:
        playlist_title = playlists[playlist_index].title
    except IndexError:
        click.echo("Invalid playlist number")
        return

    item_urls = get_playlist_urls(account, server_name, playlist_title)

    # display media items in the playlist, Title, Size, Duration
    for index, item in enumerate(playlists[playlist_index].items(), start=1):
        click.echo(f"{index}. {item.title}")

    # Ask user to select the items to download
    selected_items = click.prompt(
        "Enter the numbers of the items you want to download, "
        "separated by commas", type=str)
    selected_items = [int(item) - 1 for item in selected_items.split(",")]

    # Display The url of the selected items
    for index in selected_items:
        try:
            click.echo(item_urls[index])
        except IndexError:
            click.echo(f"Invalid item number: {index + 1}")


plex.add_command(authenticate_cli)
plex.add_command(download_media_cli)
plex.add_command(signout_cli)
plex.add_command(playlist_cli)


if __name__ == '__main__':
    plex()
