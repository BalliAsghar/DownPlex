#!/usr/bin/env python3
import click
from plexapi.exceptions import BadRequest
from plexapi.myplex import MyPlexAccount
import json
import os
import re

# AUTHENTICATION


def authenticate(username: str, password: str):
    try:
        account = MyPlexAccount(username, password)
        return True, account
    except BadRequest as e:
        return False, str(e)


def save_credentials(username: str, password: str, account):
    path = os.path.join(os.path.expanduser('~'), '.plexURLGen.json')
    servers = list_servers(account)  # list of servers
    credentials = {
        'username': username,
        'password': password,
        'servers': servers
    }
    with open(path, 'w') as f:
        json.dump(credentials, f, indent=4)


def get_credentials():
    path = os.path.join(os.path.expanduser('~'), '.plexURLGen.json')
    with open(path, 'r') as f:
        credentials = json.load(f)
    return credentials['username'], credentials['password'], credentials['servers']


# UTILS
def list_servers(account):
    return [{'name': server.name, 'id': server.clientIdentifier} for server in account.resources()]


def get_account(username, password):
    return authenticate(username, password)[1]


def get_download_url(web_url):
    if not web_url:
        return "Provide a url"

    pattern_server_id = r"(?<=server\/).*?(?=\/details)"
    pattern_metadata_key = r"(?<=metadata%2F).*?(?=&context)"

    server_id = re.search(pattern_server_id, web_url)
    metadata_key = re.search(pattern_metadata_key,
                             web_url)

    if not server_id or not metadata_key:
        return "Invalid url"

    server_id = server_id.group(0)
    metadata_key = metadata_key.group(0).replace("\\", "")

    # # if metadata_key or server_id is empty, raise exception
    if not metadata_key or not server_id:
        return "Invalid url"

    # # get credentials
    username, password, servers = get_credentials()
    # authenticate
    account = authenticate(username, password)[1]

    # find the server using a generator expression and the `next` function
    server = next((s for s in servers if s['id'] == server_id), None)

    if not server:
        print("Invalid server or invalid url")
        return

    # get media and construct the download URL
    plex = account.resource(server['name']).connect()
    media = plex.fetchItem(int(metadata_key))
    base_url = media._server._baseurl
    media_url = media.media[0].parts[0].key
    token = media._server._token
    url = f"{base_url}{media_url}?X-Plex-Token={token}&download=1"

    return url


def list_sections(account, server_name):
    plex = account.resource(server_name).connect()
    sections = plex.library.sections()
    return sections


@click.group()
def plex():
    pass


# PLAYLISTS
def list_playlists(account, server_name):
    plex = account.resource(server_name).connect()
    playlists = plex.playlists()
    return playlists


def get_playlist_urls(account, server_name, playlist_title):
    plex = account.resource(server_name).connect()
    playlist = plex.playlist(playlist_title)

    item_urls = []
    for item in playlist.items():
        base_url = item._server._baseurl
        media_url = item.media[0].parts[0].key
        url = f"{base_url}{media_url}?X-Plex-Token={item._server._token}&download=1"
        item_urls.append(url)

    return item_urls


@click.command(name='auth')
@click.option('--username', prompt=True, help='Plex username')
@click.password_option(help='Plex password')
def authenticate_cli(username, password):
    valid, account = authenticate(username, password)
    if valid:
        save_credentials(username, password, account)
        click.echo('Successfully authenticated.')
    else:
        click.echo(f'Authentication failed: {account}')


@click.command(name='download')
@click.argument('query')
def download_media_cli(query):
    url = get_download_url(query)
    click.echo(url)


@click.command(name='playlist')
def playlist_cli():
    username, password, servers = get_credentials()
    account = get_account(username, password)

    click.echo("Available servers:")
    for index, server in enumerate(servers, start=1):
        click.echo(f"{index}. {server['name']}")

    server_index = click.prompt(
        "Enter the index of the server you want to search on", type=int) - 1
    server_name = servers[server_index]['name']

    click.echo("Available playlists:")
    playlists = list_playlists(account, server_name)

    # If no playlists, exit
    if not playlists:
        click.echo("No playlists found")
        return

    for index, playlist in enumerate(playlists, start=1):
        click.echo(f"{index}. {playlist.title}")

    playlist_index = click.prompt(
        "Enter the index of the playlist you want to select", type=int) - 1
    playlist_title = playlists[playlist_index].title

    item_urls = get_playlist_urls(account, server_name, playlist_title)

    # display media items in the playlist, Title, Size, Duration
    for index, item in enumerate(playlists[playlist_index].items(), start=1):
        click.echo(f"{index}. {item.title}")

    # Ask user to select the items to download
    selected_items = click.prompt(
        "Enter the index of the items you want to download, separated by commas", type=str)
    selected_items = [int(item) - 1 for item in selected_items.split(",")]

    # Display The url of the selected items
    for index in selected_items:
        click.echo(item_urls[index])


plex.add_command(authenticate_cli)
plex.add_command(download_media_cli)
plex.add_command(playlist_cli)


if __name__ == '__main__':
    plex()
