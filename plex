#!/usr/bin/env python3
import click
from plexapi.exceptions import BadRequest
from plexapi.myplex import MyPlexAccount
import json
import os


def authenticate(username: str, password: str):
    try:
        account = MyPlexAccount(username, password)
        return True, account
    except BadRequest as e:
        return False, str(e)


def save_credentials(username: str, password: str, account):
    path = os.path.join(os.path.expanduser('~'), '.downplex.json')
    servers = list_servers(account)  # list of servers
    credentials = {
        'username': username,
        'password': password,
        'servers': servers
    }
    with open(path, 'w') as f:
        json.dump(credentials, f, indent=4)


def list_servers(account):
    servers = []
    for server in account.resources():
        servers.append({'name': server.name, 'id': server.clientIdentifier})
    return servers


def get_credentials():
    path = os.path.join(os.path.expanduser('~'), '.downplex.json')
    with open(path, 'r') as f:
        credentials = json.load(f)
    return credentials['username'], credentials['password'], credentials['servers']


def get_download_url(web_url):
    # Extract media id from url
    start = web_url.find("%2Fmetadata%") + len("%2Fmetadata%")
    end = web_url.find("&context")
    metadata_key = web_url[start:end]
    # remove 2F from metadata_key
    metadata_key = metadata_key.replace("2F", "")
    metadata_key = metadata_key.replace("\\", "")

    # Extract server id from url
    start = web_url.find("server/") + len("server/")
    end = web_url.find("/details")
    server_id = web_url[start:end]

    # if metadata_key or server_id is empty, raise exception
    if not metadata_key or not server_id:
        raise Exception("Invalid url")

    # get credentials
    username, password, servers = get_credentials()
    # authenticate
    account = authenticate(username, password)[1]

    # get server
    server = None
    for s in servers:
        if s['id'] == server_id:
            server = s
            break
    if not server:
        print("Invalid server or invalid url")
        return

    # get media
    plex = account.resource(server['name']).connect()
    media = plex.fetchItem(int(metadata_key))

    base_url = media._server._baseurl
    media_url = media.media[0].parts[0].key
    url = base_url + media_url + "?X-Plex-Token=" + \
        media._server._token + "&download=1"

    return url


@click.group()
def plex():
    pass


@click.command(name='auth')
@click.option('--username', prompt=True, help='Plex username')
@click.password_option(help='Plex password')
def authenticate_cli(username, password):
    valid, account = authenticate(username, password)
    if valid:
        save_credentials(username, password, account)
        click.echo('Successfully authenticated.')
    else:
        click.echo(f'Authentication failed: {account}')


@click.command(name='download')
@click.argument('query')
def download_media_cli(query):
    url = get_download_url(query)
    click.echo(url)


plex.add_command(authenticate_cli)
plex.add_command(download_media_cli)


if __name__ == '__main__':
    plex()
