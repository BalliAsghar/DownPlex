#!/usr/bin/env python3
import click
from plexapi.exceptions import BadRequest
from plexapi.myplex import MyPlexAccount
import json
import os
import re


def authenticate(username: str, password: str):
    try:
        account = MyPlexAccount(username, password)
        return True, account
    except BadRequest as e:
        return False, str(e)


def save_credentials(username: str, password: str, account):
    path = os.path.join(os.path.expanduser('~'), '.downplex.json')
    servers = list_servers(account)  # list of servers
    credentials = {
        'username': username,
        'password': password,
        'servers': servers
    }
    with open(path, 'w') as f:
        json.dump(credentials, f, indent=4)


def list_servers(account):
    servers = []
    for server in account.resources():
        servers.append({'name': server.name, 'id': server.clientIdentifier})
    return servers


def get_credentials():
    path = os.path.join(os.path.expanduser('~'), '.downplex.json')
    with open(path, 'r') as f:
        credentials = json.load(f)
    return credentials['username'], credentials['password'], credentials['servers']


def get_download_url(web_url):

    if not web_url:
        return "Provide a url"

    pattern_server_id = r"(?<=server\/).*?(?=\/details)"
    pattern_metadata_key = r"(?<=metadata%2F).*?(?=&context)"

    server_id = re.search(pattern_server_id, web_url)
    metadata_key = re.search(pattern_metadata_key,
                             web_url)

    if not server_id or not metadata_key:
        return "Invalid url"

    server_id = server_id.group(0)
    metadata_key = metadata_key.group(0).replace("\\", "")

    # # if metadata_key or server_id is empty, raise exception
    if not metadata_key or not server_id:
        return "Invalid url"

    # # get credentials
    username, password, servers = get_credentials()
    # authenticate
    account = authenticate(username, password)[1]

    # get server
    server = None
    for s in servers:
        if s['id'] == server_id:
            server = s
            break
    if not server:
        print("Invalid server or invalid url")
        return

    # get media
    plex = account.resource(server['name']).connect()
    media = plex.fetchItem(int(metadata_key))

    base_url = media._server._baseurl
    media_url = media.media[0].parts[0].key
    url = base_url + media_url + "?X-Plex-Token=" + \
        media._server._token + "&download=1"

    return url


def save_urls_to_file(show_name, season_index, episode_urls):
    file_name = f"Season-{season_index}.txt"
    with open(file_name, 'w') as f:
        for url in episode_urls:
            f.write(url + '\n')
    return file_name


def list_sections(account, server_name):
    plex = account.resource(server_name).connect()
    sections = plex.library.sections()
    return sections


def list_seasons(account, server_name, section_title, show_name):
    plex = account.resource(server_name).connect()
    show = plex.library.section(section_title).get(show_name)
    seasons = show.seasons()
    return seasons


def get_episode_urls(account, server_name, section_title, show_name, season_index):
    plex = account.resource(server_name).connect()
    show = plex.library.section('TV Shows').get(show_name)
    season = show.season(season_index)
    episodes = season.episodes()
    episode_urls = []
    for episode in episodes:
        base_url = episode._server._baseurl
        media_url = episode.media[0].parts[0].key
        url = base_url + media_url + "?X-Plex-Token=" + \
            episode._server._token + "&download=1"
        episode_urls.append(url)
    return episode_urls


def get_episode_filenames(account, server_name, section_title, show_name, season_index):
    plex = account.resource(server_name).connect()
    show = plex.library.section(section_title).get(show_name)
    season = show.season(season_index)
    episodes = season.episodes()
    episode_filenames = []
    for episode in episodes:
        filename = episode.media[0].parts[0].file
        episode_filenames.append(filename)
    return episode_filenames


@click.group()
def plex():
    pass


@click.command(name='auth')
@click.option('--username', prompt=True, help='Plex username')
@click.password_option(help='Plex password')
def authenticate_cli(username, password):
    valid, account = authenticate(username, password)
    if valid:
        save_credentials(username, password, account)
        click.echo('Successfully authenticated.')
    else:
        click.echo(f'Authentication failed: {account}')


@click.command(name='download')
@click.argument('query')
def download_media_cli(query):
    url = get_download_url(query)
    click.echo(url)


@click.command(name='tv')
@click.argument('show_name')
def list_seasons_cli(show_name):
    username, password, servers = get_credentials()
    account = authenticate(username, password)[1]

    # Display available servers and prompt user to choose one
    click.echo("Available servers:")
    for index, server in enumerate(servers, start=1):
        click.echo(f"{index}. {server['name']}")

    server_index = click.prompt(
        "Enter the index of the server you want to search on", type=int) - 1
    server_name = servers[server_index]['name']

    # Display available sections and prompt user to choose one
    click.echo("Available sections:")
    sections = list_sections(account, server_name)
    for index, section in enumerate(sections, start=1):
        click.echo(f"{index}. {section.title}")

    section_index = click.prompt(
        "Enter the index of the section you want to search in", type=int) - 1
    section_title = sections[section_index].title

    seasons = list_seasons(account, server_name, section_title, show_name)
    for season in seasons:
        click.echo(f'{season.title}')

    season_index = click.prompt(
        "Enter the season number you want to select", type=int)

    episode_filenames = get_episode_filenames(
        account, server_name, section_title, show_name, season_index)
    click.echo(f"Episode filenames for {show_name} Season {season_index}:")
    for filename in episode_filenames:
        click.echo(filename)

    episode_urls = get_episode_urls(
        account, server_name, section_title, show_name, season_index)
    click.echo(f"Episode URLs for {show_name} Season {season_index}:")
    for url in episode_urls:
        click.echo(url)

    save_to_file = click.confirm(
        "Do you want to save the URLs to a text file?", default=False)
    if save_to_file:
        file_name = save_urls_to_file(show_name, season_index, episode_urls)
        click.echo(f"URLs saved to {file_name}")


plex.add_command(authenticate_cli)
plex.add_command(download_media_cli)
plex.add_command(list_seasons_cli)


if __name__ == '__main__':
    plex()
